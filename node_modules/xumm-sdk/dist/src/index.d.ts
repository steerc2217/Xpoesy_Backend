import { Meta } from './Meta';
import { Storage } from './Storage';
import { Payload } from './Payload';
import { xApp } from './xApp';
import type * as Types from './types/xumm-api';
import type { xAppOttData } from './types/index';
declare class XummSdk {
    private Meta;
    storage: Storage;
    payload: Payload;
    xApp: xApp;
    constructor(apiKey?: string, apiSecret?: string);
    private getEnv;
    /**
     * Proxy methods to Meta class below
     */
    ping(): Promise<import("./types").ApplicationDetails>;
    getCuratedAssets(): Promise<import("./types").CuratedAssetsResponse>;
    getRates(currencyCode: string): Promise<import("./types").RatesResponse>;
    getKycStatus(userTokenOrAccount: string): Promise<"NONE" | "IN_PROGRESS" | "REJECTED" | "SUCCESSFUL">;
    getTransaction(txHash: string): Promise<import("./types").XrplTransaction>;
}
declare class XummSdkJwt extends XummSdk {
    private ottResolved;
    private resolve;
    constructor(apiKey: string, ott?: string);
    _inject(ottData: xAppOttData, invoker: Meta): void;
    getOttData(): Promise<xAppOttData>;
}
export { XummSdk, XummSdkJwt };
export type { Types as XummTypes };
